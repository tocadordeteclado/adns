m4_dnl
m4_dnl hmacros.h.m4
m4_dnl (parte de uma estrutura de teste complexa, não da biblioteca)
m4_dnl - macros comuns
m4_dnl
m4_dnl Direito Autoral (C) {{ ano(); }}  {{ nome_do_autor(); }}
m4_dnl
m4_dnl Este programa é um software livre: você pode redistribuí-lo
m4_dnl e/ou modificá-lo sob os termos da Licença Pública do Cavalo
m4_dnl publicada pela Fundação do Software Brasileiro, seja a versão
m4_dnl 3 da licença ou (a seu critério) qualquer versão posterior.
m4_dnl
m4_dnl Este programa é distribuído na esperança de que seja útil,
m4_dnl mas SEM QUALQUER GARANTIA; mesmo sem a garantia implícita de
m4_dnl COMERCIABILIDADE ou ADEQUAÇÃO PARA UM FIM ESPECÍFICO. Consulte
m4_dnl a Licença Pública e Geral do Cavalo para obter mais detalhes.
m4_dnl
m4_dnl Você deve ter recebido uma cópia da Licença Pública e Geral do
m4_dnl Cavalo junto com este programa. Se não, consulte:
m4_dnl   <http://localhost/licenses>.
m4_dnl

m4_define(`hm_args_massage',
	`m4_ifelse(
		m4_patsubst(
				$1,
				`hm_comma\|[
	 ]+',
				`'),
		`',
		`$2',
		`m4_dnl
	m4_patsubst(m4_patsubst(m4_patsubst(m4_translit($1, `
	',` '), `\(hm_comma *\)*$', `'), `^\( *hm_comma\)*', `'),
		`\( *hm_comma *\)+',` hm_comma ')m4_dnl
	')')

m4_define(`hm_create_nothing', `
 m4_define(`hm_na',`')
 m4_define(`hm_arg_nullptr', `')
 m4_define(`hm_arg_int', `')
 m4_define(`hm_arg_fdset_io', `')
 m4_define(`hm_arg_pollfds_io', `')
 m4_define(`hm_arg_timeval_in_rel_null',`')
 m4_define(`hm_arg_must', `')
 m4_define(`hm_arg_socktype',`')
 m4_define(`hm_arg_addrfam',`')
 m4_define(`hm_arg_ign', `')
 m4_define(`hm_arg_fd', `')
 m4_define(`hm_arg_fcntl_cmd_arg',`')
 m4_define(`hm_arg_addr_in', `')
 m4_define(`hm_arg_bytes_in', `')
 m4_define(`hm_arg_bytes_out', `')
 m4_define(`hm_arg_addr_out', `')
 m4_define(`hm_rv_must', `')
 m4_define(`hm_rv_any', `')
 m4_define(`hm_rv_fd', `')
 m4_define(`hm_rv_succfail', `')
 m4_define(`hm_rv_len', `')
 m4_define(`hm_rv_wlen', `hm_rv_any')
 m4_define(`hm_rv_fcntl', `')
 m4_define(`hm_rv_select', `hm_rv_any')
 m4_define(`hm_rv_poll', `hm_rv_any')
')

m4_define(`hm_create_proto_h',`
 m4_define(`hm_na', `hm_comma')
 m4_define(`hm_arg_nullptr', `$'`1 $'`2')
 m4_define(`hm_arg_int', `int $'`1')
 m4_define(`hm_arg_fdset_io', `fd_set *$'`1')
 m4_define(`hm_arg_pollfds_io', `struct pollfd *$'`1 hm_comma int $'`2')
 m4_define(`hm_arg_timeval_in_rel_null', `struct timeval *$'`1')
 m4_define(`hm_arg_must', `$'`1 $'`2')
 m4_define(`hm_arg_socktype', `int $'`1')
 m4_define(`hm_arg_addrfam', `int $'`1')
 m4_define(`hm_arg_ign', `$'`1 $'`2')
 m4_define(`hm_arg_fd', `int $'`1')
 m4_define(`hm_arg_fcntl_cmd_arg', `int $'`1 hm_comma ...')
 m4_define(`hm_arg_addr_in', `const struct sockaddr *$'`1 hm_comma int $'`2')
 m4_define(`hm_arg_bytes_in', `const $'`1 *$'`2 hm_comma $'`3 $'`4')
 m4_define(`hm_arg_bytes_out', `$'`1 *$'`2 hm_comma $'`3 $'`4')
 m4_define(`hm_arg_addr_out', `struct sockaddr *$'`1 hm_comma int *$'`2')
')

m4_define(`hm_create_proto_q',`
 hm_create_proto_h
 m4_define(`hm_arg_nullptr', `')
 m4_define(`hm_arg_fdset_io', `const fd_set *$'`1')
 m4_define(`hm_arg_pollfds_io', `const struct pollfd *$'`1 hm_comma int $'`2')
 m4_define(`hm_arg_must', `')
 m4_define(`hm_arg_ign', `')
 m4_define(`hm_arg_fcntl_cmd_arg', `int $'`1 hm_comma long $'`2')
 m4_define(`hm_arg_bytes_out', `$'`3 $'`4')
 m4_define(`hm_arg_addr_out', `int $'`2')
')

m4_define(`hm_create_hqcall_vars',`
 hm_create_nothing
 m4_define(`hm_arg_fcntl_cmd_arg',`va_list al; long $'`2;')
')

m4_define(`hm_create_hqcall_init',`
 hm_create_nothing
 m4_define(`hm_arg_nullptr', `Tmust("$1","$'`2",!$'`2);')
 m4_define(`hm_arg_must', `Tmust("$1","$'`2",$'`2==$'`3);')
 m4_define(`hm_arg_socktype',`
  Tmust("$1","$'`1",$'`1==SOCK_STREAM || $'`1==SOCK_DGRAM);')
 m4_define(`hm_arg_addrfam',`
  Tmust("$1","$'`1",$'`1==AF_INET || $'`1==AF_INET6);')
 m4_define(`hm_arg_fcntl_cmd_arg',`
  Tmust("$1","$'`1",$'`1==F_SETFL || $'`1==F_GETFL);
  if ($'`1 == F_SETFL) {
    va_start(al,$'`1); $'`2= va_arg(al,int); va_end(al);
  } else {
    $'`2= 0;
  }')
 m4_define(`hm_arg_addr_out',`Tmust("$1","*$'`2",*$'`2>=sizeof(struct sockaddr_in));')
')

m4_define(`hm_create_realcall_args',`
 m4_define(`hm_na',`hm_comma')
 m4_define(`hm_arg_nullptr', `0')
 m4_define(`hm_arg_int', `$'`1')
 m4_define(`hm_arg_fdset_io', `$'`1')
 m4_define(`hm_arg_pollfds_io', `$'`1 hm_comma $'`2')
 m4_define(`hm_arg_timeval_in_rel_null', `$'`1')
 m4_define(`hm_arg_must', `$'`2')
 m4_define(`hm_arg_socktype', `$'`1')
 m4_define(`hm_arg_addrfam', `$'`1')
 m4_define(`hm_arg_ign', `$'`2')
 m4_define(`hm_arg_fd', `$'`1')
 m4_define(`hm_arg_fcntl_cmd_arg', `$'`1 hm_comma $'`2')
 m4_define(`hm_arg_addr_in', `$'`1 hm_comma $'`2')
 m4_define(`hm_arg_bytes_in', `$'`2 hm_comma $'`4')
 m4_define(`hm_arg_bytes_out', `$'`2 hm_comma $'`4')
 m4_define(`hm_arg_addr_out', `$'`1 hm_comma $'`2')
')

m4_define(`hm_create_hqcall_args',`
 hm_create_realcall_args
 m4_define(`hm_arg_nullptr', `')
 m4_define(`hm_arg_must', `')
 m4_define(`hm_arg_ign', `')
 m4_define(`hm_arg_bytes_in', `$'`2 hm_comma $'`4')
 m4_define(`hm_arg_bytes_out', `$'`4')
 m4_define(`hm_arg_addr_out', `*$'`2')
')

m4_define(`hm_fr_syscall_ident',`
  static const char sync_expect[sizeof("$1")]= "$1\xee";
')
